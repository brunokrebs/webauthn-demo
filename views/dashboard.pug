extends layout

block title
  title Dashboard

block content
  .webauthn-container
    .card
      .card-body
        h3.card-title Dashboard
        p.card-text Welcome to the dashboard,
          strong &nbsp;#{user.email}!
        p.card-text How about we create a webauthn credential for you?
        div.d-flex.justify-content-start.gap-3
          if !user.credential
            button.btn.btn-primary(onclick='webauthn()') Create WebAuthn Credential
          a.btn.btn-default(href='/logout') Logout
        
  script.
    function webauthn() {
      const challenge = new Uint8Array(32);
      window.crypto.getRandomValues(challenge);

      const userId = new Uint8Array(8);
      window.crypto.getRandomValues(userId);
      
      const publicKey = {
        challenge: new Uint8Array(challenge),
        rp: {
          name: 'WebAuthn Demo', // Relying party name
          id: '92aa-2804-14d-4c87-92a6-ac3b-ce8c-fab1-992d.ngrok-free.app',     // Relying on party ID
        },
        user: {
          id: userId,
          name: 'bruno@mimic.com',
          displayName: 'Bruno Krebs',
        },
        pubKeyCredParams: [
          {
            type: "public-key",
            alg: -7 // "ES256" as registered in the IANA COSE Algorithms registry
          },
          {
            type: "public-key",
            alg: -257 // Value registered by this specification for "RS256"
          }
        ],
        timeout: 60000, // 1-minute timeout
        attestation: 'indirect', // Attestation type
      };

      // Note: The following call will cause the authenticator to display UI.
      navigator.credentials.create({ publicKey })
        .then(sendCredentialToServer)
        .catch((error) => {
          console.log(error);
          alert("Something went wrong: " + error);
        });
    }

    async function sendCredentialToServer(credential) {
      let attestationObject = credential.response.attestationObject;
      let clientDataJSON = credential.response.clientDataJSON;
      
      const dataToSend = {
        id: credential.id,
        attestationObject: arrayBufferToBase64(attestationObject),
        clientDataJSON: arrayBufferToBase64(clientDataJSON)
      };

      fetch('/api/register-credential', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSend),
      })
      .then(response => response.json())
      .then(data => console.log('Success:', data))
      .catch((error) => console.error('Error:', error));
    }

    function arrayBufferToBase64(buffer) {
      let binary = '';
      const bytes = new Uint8Array(buffer);
      const len = bytes.byteLength;
      for (let i = 0; i < len; i++) {
          binary += String.fromCharCode(bytes[i]);
      }
      return window.btoa(binary);
    }